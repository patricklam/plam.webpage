<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!--Automatically generated by Erik Demaine's notes.py script-->
<head>
<title>
ECE459: Programming for Performance -- PDF Lecture notes -- Patrick Lam
</title>
<style type="text/css">
 li { padding-bottom:1em }
</style>
<!--#include virtual="/p4p/includes/header.html" -->

<div id="primarycontarea">
  <div id="primarycontent">
    <!-- InstanceBeginEditable name="primarycontent" -->
<h1><a href="http://www.patricklam.ca/p4p">ECE459: Programming for Performance</a>
    (Winter 2014)</h1>
<h2><a href="http://www.patricklam.ca">Patrick Lam</a></h2>
<div style="background-color: #FFFF80; color: black">
<h2>Lecture notes</h2>
</div>


<p>You may use these lecture notes however you like. I am placing no
restrictions on their use. As far as I'm concerned, feel free to remix and
share.</p>

<ul>
<li> <a href="pdf/L01.pdf"><strong>Lecture 1</strong></a>: <a href="pdf/L01-slides.pdf">[slides]</a> Introduction: making programs faster; measures of performance (bandwidth vs. latency). Improving latency: doing each thing faster. Improving bandwidth: doing more things at a time (parallelism). Challenges to parallelism.<br style="margin-bottom:1em">
Live coding example: <a href="code/race.c">Race detection</a> (Michael Chang)</li>
<li> <a href="pdf/L02.pdf"><strong>Lecture 2</strong></a>: <a href="pdf/L02-slides.pdf">[slides]</a> Modern Hardware: investigating branch prediction and caches. Amdahl's Law and Gustafson's Law: predicting maximum speedup and a more optimistic view.<br style="margin-bottom:1em">
Live coding example: <a href="code/branch.c">Branch prediction effects</a> (Peter Sobot); <a href="code/cache.c">Forcing cache misses</a> (Chris Kleynhans)</li>
<li> <a href="pdf/L03.pdf"><strong>Lecture 3</strong></a>: <a href="pdf/L03-slides.pdf">[slides r1]</a> Parallelism vs Concurrency; Thread Models (1:1 etc); Types of Multiprocessing.<br style="margin-bottom:1em">
Live coding example: <a href="code/evaluating-threading-model.c">Which threading model am I running?</a> (Derek Chow)</li>
<li> <a href="pdf/L04.pdf"><strong>Lecture 4</strong></a>: <a href="pdf/L04-slides.pdf">[slides]</a> Using Pthreads and Simple Locks.<br style="margin-bottom:1em">
Live coding example: <a href="code/create_processes.c">process</a> vs <a href="code/create_threads">thread</a> creation time (Peter Samsonov); <a href="code/bad_detach.c">bad detach (no pthread_exit)</a> vs <a href="code/good_detach.c">good detach</a> (me); <a href="code/data_race.c">triggering a data race</a> (Kirk Zathey).</li>
<li> <a href="pdf/L05.pdf"><strong>Lecture 5</strong></a>: <a href="pdf/L05-slides.pdf">[slides]</a> Assignment 1 overview. Asynchronous and non-blocking I/O. More on races. <br style="margin-bottom:1em">
Live coding examples: <a href="code/threadbomb.c">determine # of threads</a> (David Hu); <a href="code/read-latency.c">nonblocking I/O blocks on files</a> (me)</li>
<li> <a href="pdf/L06.pdf"><strong>Lecture 6</strong></a>: <a href="pdf/L06-slides.pdf">[slides]</a> Level- versus edge-triggered example. Using curl_multi. Synchronization primitives. <br style="margin-bottom:1em">
Live coding examples: <a href="code/socket.c">level- vs edge- triggered</a> (Andrew Tinits); <a href="code/contending_mutex.c">contending mutex</a> vs <a href="code/contending_spinlock.c">contending spin</a> (me)</li>
<li> <a href="pdf/L06X.pdf"><strong>Lecture 6X</strong></a>: <a href="pdf/L06X-slides.pdf">[slides]</a> Designing servers (threads, processes, async/nonblocking I/O, node.js).</li>
<li> <a href="pdf/L07.pdf"><strong>Lecture 7 (v3)</strong></a>: <a href="pdf/L07-slides.pdf">[slides v2]</a> Making C compilers work for you; memory-carried dependencies (RAR, RAW, WAR, WAW). <br style="margin-bottom:1em">

Live coding example: <a href="code/gimple-example.c">code used to create GIMPLE</a> (Atulan Zaman).</li>
<li> <a href="pdf/L08.pdf"><strong>Lecture 8</strong></a>: <a href="pdf/L08-slides.pdf">[slides]</a> Loop-carried dependencies, speculation (and breaking dependencies). <br style="margin-bottom:1em">

Live coding example: <a href="code/mandelbrot-original.c">original Mandelbrot code</a>; <a href="code/mandelbrot-parallelized.c">parallelized Mandelbrot code</a> (me).</li>
<li> <a href="pdf/L09.pdf"><strong>Lecture 9</strong></a>: <a href="pdf/L09-slides.pdf">[slides]</a> Parallelization patterns; SIMD example (more later); intro to automatic parallelization. <br style="margin-bottom:1em">

Live coding examples: <a href="code/simd.c">code used to illustrate SIMD instruction usage</a> (Wen-Hao Lue).</li>

<li> <a href="pdf/L10.pdf"><strong>Lecture 10</strong></a>: <a href="pdf/L10-slides.pdf">[slides]</a> Automatic parallelization. <br style="margin-bottom:1em">

Live coding examples: <a href="code/omp_vector.c">unparallelized vector processing</a>, <a href="code/omp_vector_manual_goodstuff.c">manually-parallelized good horizontal version</a>, <a href="code/omp_vector_manual_bad.c">manually-parallelized bad horizontal version</a>, <a href="code/omp_vector_manual_vertical.c">manually-parallelized vertical version</a> (Tatsuya Morita-Ahad); <a href="code/fploop.c">autoparallelizable vector/matrix multiply example</a> (me).</li>

<li> <a href="pdf/L11.pdf"><strong>Lecture 11</strong></a>: <a href="pdf/L11-slides.pdf">[slides]</a> OpenMP.<br style="margin-bottom:1em">
    Live coding examples: <a href="code/breakopenmp.c">violating loop parallelization conditions</a> (Randy).</li>

<li> <a href="pdf/L11X.pdf"><strong>Lecture 11X</strong></a>: <a href="pdf/L11X-slides.pdf">[slides]</a> A Principled view of OpenMP (not presented in lecture; use as reference material). <br style="margin-bottom:1em">
    Live coding examples: <a href="code/hello.c">multi-thread hello</a> (me).</li>

<li> <a href="pdf/L12.pdf"><strong>Lecture 12</strong></a>: <a href="pdf/L12-slides.pdf">[slides]</a> Advanced OpenMP.<br style="margin-bottom:1em">
    Live coding examples: <a href="code/parsections.c">using parallel sections</a> (David).</li>

<li> <a href="pdf/L13.pdf"><strong>Lecture 13</strong></a>: <a href="pdf/L13-slides.pdf">[slides]</a> Memory models, atomics, memory models and atomics in C/C++11, good C++ practice.<br style="margin-bottom:1em">
    Live coding examples: <a href="code/threads.C">C++11 threads</a>, <a href="code/threads_atomic.C">C++11 threads and atomics</a> (Steven Miclette).</li>

<li> <a href="pdf/L14.pdf"><strong>Lecture 14</strong></a>: <a href="pdf/L14-slides.pdf">[slides]</a> Midterm notes; cache coherency; fine-grained locking.<br style="margin-bottom:1em">
    Live coding examples: <a href="code/fine-grained-locking.c">fine-grained locking</a> (fixed) (me).</li>

<li> <a href="pdf/L15.pdf"><strong>Lecture 15</strong></a>: <a href="pdf/L15-slides.pdf">[slides]</a> Assignment 3 discussion. Profiling (gprof).<br style="margin-bottom:1em">
    Non-live coding example: <a href="code/profilee.c">profilee</a>.</li>

<li> <a href="pdf/L16.pdf"><strong>Lecture 16</strong></a>: <a href="pdf/L16-slides.pdf">[slides]</a> More profiling (gperftools; systemwide: oprofile, WAIT, DTrace). Reentrancy, inlining.</li>

<li> <a href="pdf/L17.pdf"><strong>Lecture 17</strong></a>: <a href="pdf/L17-slides.pdf">[slides]</a> C, C++ and Java programming idiom comparisons: library vs self-implemented qsort, using function pointers or not, arrays versus vectors, vectors versus lists.<br style="margin-bottom:1em">
Live coding examples (all me): <a href="code/L17/test-library-qsort.c">library qsort</a>, <a href="code/L17/test-self-implemented-qsort-direct-compare.c">own qsort, direct compare</a>, <a href="code/L17/test-self-implemented-qsort-hardcoded-fn-compare.c">own qsort, hardcoded comparison function call</a>, <a href="code/L17/test-self-implemented-qsort-fnptr-compare.c">own qsort, function pointer for comparison function</a>, <a href="code/L17/test-stl-qsort-array.cc">C++ STL qsort, array</a>, <a href="code/L17/test-stl-qsort-vector.cc">C++ STL qsort, vector</a>, <a href="code/L17/SortPrimitiveInts.java">Java primitive int sort</a>, <a href="code/L17/SortIntegers.java">Java Integer sort</a>, <a href="code/L17/vector_vs_list.cc">C++ vector vs list</a>.</li>

<li> <a href="pdf/L18.pdf"><strong>Lecture 18</strong></a>: <a href="pdf/L18-slides.pdf">[slides]</a>  Compiler optimizations.<br style="margin-bottom:1em">
    Live coding examples: <a href="code/opts.c">various compiler optimizations</a> (Kyle Watson).</li>
</li>
<li> <a href="pdf/L19.pdf"><strong>Lecture 19</strong></a>: <a href="pdf/L19-slides.pdf">[slides]</a>  Introduction to OpenCL concepts. OpenCL examples. <a href="code/opencl.c">Simple OpenCL example, C bindings</a>; <a href="code/vector_add.cpp">More sophisticated vector-add OpenCL example, C++ bindings</a>, <a href="code/vector_add_kernel.cl">vector add kernel</a>.</li>
<li> <a href="pdf/L20.pdf"><strong>Lecture 20</strong></a>: <a href="pdf/L20-slides.pdf">[slides]</a>  Password cracking. Reduced-resource computation. Software Transactional Memory.</li>
<li> <a href="pdf/L21.pdf"><strong>Lecture 21</strong></a>: <a href="pdf/L21-slides.pdf">[slides]</a>  High-performance languages. MapReduce.</li>
<li> <a href="pdf/L22.pdf"><strong>Lecture 22</strong></a>: <a href="pdf/L22-slides.pdf">[slides]</a> Clusters and Message Passing Interface (MPI). The Cloud. <br style="margin-bottom:1em">
    Live coding examples: <a href="code/mpi-hello-world.c">MPI Hello, World</a>, <a href="code/mpi-send-receive.c">MPI send/receive</a> (Anurag Dosapati).</li>
<li> <a href="pdf/L23.pdf"></a><strong>Lecture 23</strong></a>: <a href="pdf/L23-slides.pdf"></a>[slides]</a> How profilers lie. A3 solutions (not posted).</li>
<li> <a href="pdf/L24.pdf"></a><strong>Lecture 24</strong></a>: <a href="pdf/L24-slides.pdf">[slides]</a> Optimizing webpages. Massive scalability. Course summary.</li>

</ul>

</div>
</div>
</body>
</html>
