<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<!--Automatically generated by Erik Demaine's notes.py script-->
<head>
<title>
ECE459: Programming for Performance -- PDF Lecture notes -- Patrick Lam
</title>
<style type="text/css">
 li { padding-bottom:1em }
</style>
<!--#include virtual="/p4p/includes/header.html" -->

<div id="primarycontarea">
  <div id="primarycontent">
    <!-- InstanceBeginEditable name="primarycontent" -->
<h1><a href="http://www.patricklam.ca/p4p">ECE459: Programming for Performance</a>
    (Winter 2013)</h1>
<h2><a href="http://www.patricklam.ca">Patrick Lam</a></h2>
<div style="background-color: #FFFF80; color: black">
<h2>Lecture notes</h2>
</div>


<p>You may use these lecture notes however you like. I am placing no
restrictions on their use. As far as I'm concerned, feel free to remix and
share.</p>

<p>pdftk is great. I can create <a href="pdf/L-midterm.pdf">lecture notes 1-14</a> and <a href="pdf/L-midterm-slides.pdf">lecture slides 1-14</a> PDF files with one command.</p>

<p>Also, here are <a href="pdf/L15-23.pdf">lecture notes 15-23</a> and <a href="pdf/L15-24-slides.pdf">slides 15-24</a>.</p>

<ul>
<li> <a href="pdf/L01.pdf"><strong>Lecture 1</strong></a>: <a href="pdf/L01-slides.pdf">[slides]</a> Introduction: making programs faster; measures of performance (bandwidth vs. latency). Improving latency: doing each thing faster. Improving bandwidth: doing more things at a time (parallelism). Challenges to parallelism.</li>
<li> <a href="pdf/L02.pdf"><strong>Lecture 2</strong></a>: <a href="pdf/L02-slides.pdf">[slides]</a> (v2) Amdahl's Law and Gustafson's Law. Reference to Cliff Click's talk on modern hardware.</li>
<li> <a href="pdf/L03.pdf"><strong>Lecture 3</strong></a>: <a href="pdf/L03-slides.pdf">[slides]</a> Concurrency and Parallelism. Implementing Threads.</li>
<li> <a href="pdf/L04.pdf"><strong>Lecture 4</strong></a>: <a href="pdf/L04-slides.pdf">[slides]</a> Using Pthreads and Simple Locks.</li>
<li> <a href="pdf/L05.pdf"><strong>Lecture 5</strong></a>: <a href="pdf/L05-slides.pdf">[slides]</a> Compilers and you (three-address code; volatile; restrict). Race conditions. More ways to synchronize threads.</li>
<li> <a href="pdf/L06.pdf"><strong>Lecture 6</strong></a>: <a href="pdf/L06-slides.pdf">[slides]</a> Dependencies. Loop- and memory-carried. RAW/WAR/WAW/RAR.</li>
<li> <a href="pdf/L07.pdf"><strong>Lecture 7</strong></a>: <a href="pdf/L07-slides.pdf">[slides]</a> Speculative execution and value speculation. SIMD overview. Parallelization patterns.</li>
<li> <a href="pdf/L08.pdf"><strong>Lecture 8</strong></a>: <a href="pdf/L08-slides.pdf">[slides]</a> Automatic parallelization of C code: when it works and when it doesn't.</li> 
<li> <a href="pdf/L09.pdf"><strong>Lecture 9</strong></a>: <a href="pdf/L09-slides.pdf">[slides]</a> OpenMP basics; variable scoping (private vs shared); better performance through scheduling; parallel sections and tasks.</li>
<li> <a href="pdf/L10.pdf"><strong>Lecture 10</strong></a>: <a href="pdf/L10-slides.pdf">[slides]</a> A Clearer Explanation of how to use OpenMP.</li> 
<li> <a href="pdf/L11.pdf"><strong>Lecture 11</strong></a>: <a href="pdf/L11-slides.pdf">[slides]</a> (v2, minor) Advanced OpenMP constructs: flush, tasks.</li>
<li> <a href="pdf/L12.pdf"><strong>Lecture 12</strong></a>: <a href="pdf/L12-slides.pdf">[slides]</a> Memory models. Reordering. Fences and barriers. Atomic instructions. Incrementing for Performance. </li>
<li> <a href="pdf/L13.pdf"><strong>Lecture 13</strong></a>: <a href="pdf/L13-slides.pdf">[slides]</a> Cache coherency. Implementing high-performance servers.</li>
<li> <a href="pdf/L14.pdf"><strong>Lecture 14</strong></a>: <a href="pdf/L14-slides.pdf">[slides]</a> Locking granularity; reentrancy vs thread-safety; inlining; high-level language performance tweaks.</li>
<li> <a href="pdf/L15.pdf"><strong>Lecture 15</strong></a>: <a href="pdf/L15-slides.pdf">[slides]</a> Static compiler optimizations. Profile-guided optimizations.</li> 
<li> <a href="pdf/L16.pdf"><strong>Lecture 16</strong></a>: <a href="pdf/L16-slides.pdf">[slides, v2]</a> Midterm solutions.</li> 
<li> <a href="pdf/L17.pdf"><strong>Lecture 17</strong></a>: <a href="pdf/L17-slides.pdf">[slides]</a> Midterm results; A3 Discussion (part 1); profiling: principles, per-process profiling, gprof, Google Perf Tools CPU profiler.</li> 
<li> <a href="pdf/L18.pdf"><strong>Lecture 18</strong></a>: <a href="pdf/L18-slides.pdf">[slides]</a> More A3 discussion; profiling tools, including oprofile, DTrace, WAIT, perf.</li>
<li> <a href="pdf/L19.pdf"><strong>Lecture 19</strong></a>: <a href="pdf/L19-slides.pdf">[slides]</a> Reduced-resource computing: discarding tasks, loop perforation; software transactions; languages for high-performance computing.</li>
<li> <a href="pdf/L20.pdf"><strong>Lecture 20</strong></a>: <a href="pdf/L20-slides.pdf">[slides]</a> GPU programming 1: features of OpenCL.</li>
<li> <a href="pdf/L21.pdf"><strong>Lecture 21</strong></a>: <a href="pdf/L21-slides.pdf">[slides]</a> GPU programming 2: two working examples.</li>
<li> <a href="pdf/L22.pdf"><strong>Lecture 22</strong></a>: <a href="pdf/L22-slides.pdf">[slides]</a> MapReduce.</li>
<li> <a href="pdf/L23.pdf"><strong>Lecture 23</strong></a>: <a href="pdf/L23-slides.pdf">[slides]</a> Clusters (programming distributed systems with MPI) and Clouds.</li>
<li> <a href="pdf/L24.pdf"></a><strong>Lecture 24</strong></a>: <a href="pdf/L24-slides.pdf">[slides]</a> Massive Scalability. Course summary.</li>
</ul>

</div>
</div>
</body>
</html>
